===================================================================
-Installing Express, Setting up a Server, and Running That Server.-
===================================================================

    1. Go to your project folder and initiate a package .json
        - NPM INIT, OR NPM INIT -Y

    2. Next Install The Required Dependencies:
        i. npm install --save <depencency>
            - Takes whatever you install and adds it to the dependencies in the packages.json

    3. In the app.js (or whatever file you designated as your 'main' in your packages.json)
    import the express module.
        i. const express = require('express');

    4. Next you want to declare the express function as a variable.
        i. const app = express()

    5. Create a route for the root of the website.
        app.get('/', () => {
            res.send('Whatever')
        })
    6. Create a listen for the server.
        app.listen(port, err)

===================================================================
-
===================================================================
-             Installing a Template Engine - "PUG"                -
===================================================================

    1. Install the template engine pug.
        i. npm i pug in the command line.

    2. Use a middle ware to tell the server to use pug view engine:
        i. app.set('view engine', 'pug')

    3. Create an pug file in a 'views' folder. 
    
    4. Update the HOME route such that the server responds with a render
    of a pug file.
        i.  // Home Route
            app.get('/', (req, res) => {
                res.render('index')
            })
    
    5. Now it will point to the pug file. This pug file is where we build
    the interface!

===================================================================
-
===================================================================
-                  Passing Values to a Pug file                   -
===================================================================

    1. We can send an object to the pug view file.
        i. 
            app.get('/', (req, res) => {
                res.render('index', {
                    title: 'Hello'
                })
            })

        ii. In order to use the property in pug we can it by 
        #{property}

===================================================================
-
===================================================================
-                      Adding A New Route                         -
===================================================================

    1. Create a new app.get with the route 'articles/add'
        i.
            app.get('/articles/add', (req, res) => {
                res.render()
            })
        ii. Render a DIFFERENT pug template. In this case 'add'
        and send a property named title: 'Add Article'
            app.get('/articles/add', (req, res) => {
                res.render('add', {
                    title: 'Add Article'
                })
            })

===================================================================
-
===================================================================
-                      PUG: Creating a Layout                     -
===================================================================
    For consistency we want to create a template which all pages 
    are based on.

    1. Create a new file in /views called layout.pug.

    2. Separate all the code you wish other pages to inherit and 
    where you want a page to display write 'block content'

        i.
            doctype html
            html
                head
                    title Knowledge Base
                body
                    block content
                    br
                    hr 
                    footer
                        p Copyright %copy; 2020


    BLOCK CONTENT is where the output will be.

    3. In order to display the layout.pug on the other views you must EXTEND
    the layout into those views.
        i. Write 'extends layout' at the top of the pug file.
        ii. Call the 'block content'
        iii. Indent all view specific content such that block content is the parent.

            iv.
                extends layout.pug

                block content
                    h1 #{title}
===================================================================
-
===================================================================
-                          PUG: LOGIC                             -
===================================================================
We can add if statements and loops to pug.

    1. Create an array of objects in a req/res function and pass it
    into the PUG view.
        i.
            app.get('route', (req, res) =>{
                let array = [
                    {
                        property1: 'blah',
                        property2: 'shblah'
                    },
                ]
                res.render('pugfile', {
                    title: 'blah'
                    property: array
                })
            })
        
        ~ We can pass multiple variables in the object. ~ // May need to elaborate.
    
    2. Now that we've sent the object data to the specific PUG view. We
    can use that information.

    3. Pug Iteration
        Pug supports two primary methods of iteration: each and while
            A. EACH: This iterates over EACH value/property in an array or object.

            you can include and 'index' to display the index number/property name:
            ul
                each val, index in [1, 2, 3]
                    li = val and index

            This will display bullet points with VAL being the value of each item
            in the array.

            NOTE: An else can be used. For example, if there are no values to iterate
            over then you can write else and a code snippet that will run under that
            condition.

            B. WHILE: This works pretty simple. You declare a condition and so long as
            that condition is true the code snippet will run.
                EX.
                    - var n = 0;  // ======== This is how you declare a variable in pug. ========
                    ul
                        while n < 4
                        li= n++

                This will produce bullet points for 0, 1, 2, 3

===================================================================
-
===================================================================
-                     WORKING WITH MONGODB                        -
===================================================================

    1. MAKE SURE TO INSTALL MONGODB COMMAND LINE ON YOUR MACHINE.
    
    2. In the command line, run mongod to initiate the server.

    3. In the command line, run mongo to connect to the server.

    4. type 'show dbs' to see your databases.

    5. Create a database in MONGODB 
        i. type: use nameOfDatabase
        ii. This will create the db and situate you inside of it.
    
    6. In the database you created, now you must create a COLLECTION
        i. type: db.createCollection('name of collection')

    7. To show the collections in the database:
        i. type: show collections
    
    8. For this project we want to create an article object with the
    properties: title, author, body..

        i. to insert an object into a collection:
            db.nameOfCollection.insert({})
        ii. Once the object has been added, to verify it is in fact
        inserted we should find it.

            type: db.nameOfCollection.find()
    
    9. Add as many objects as needed.

===================================================================
-
===================================================================
-                     INSTALLING MONGOOSE                         -
===================================================================

    1. Install the mongoose dependency.
        i. type: npm i mongoose.
    
    2. In your main file, import mongoose.
        i. const mongoose = require('mongoose');
    
    3. Next we want to connect mongoose to the database we created.
    We do this by using a mongoose method named .connect().
        i. type mongoose.connect();
        ii. the connect() method takes two parameters.
            1. a string address.
            2. an object {useNewUrlParser: true}
                ? This object helps avoid deprecation warnings.
                These warnings will arise because MONGOOSE wrote
                a new tool which was used to parse mongodb connection
                strings. This is a big change and thus, they gave 
                the new parser a check. Hence, we must toggle it to
                true.
    
    4. Now that we have a pending connection to our locally hosted db
    We want to recieved notifications regarding our connection and 
    whether an error has occured connecting to the db.

    var db = mongoose.connectionion;
    
    db.on('error', (err) => {
        console.log(err)
    });

    db.once('open', function() {
        console.log('Connected to MongoDB')
    });

===================================================================
-
===================================================================
-                        MONGOOSE MODEL                           -
===================================================================

    1. Now we are creating a model for mongoose.
        i. Create a folder in the root directory /models
    
    2. In the /models dir we create a new file called articles.js.
    We will refer to this file as our model file.

    3. In the model file we will need to import mongoose.
        i. let mongoose = require('mongoose');
    
    4. In the model file we are going to create a SCHEMA.
    This will require the use of mongoose.schema()
        i.
            let articleSchema = mongoose.Schema({})
        ii. We define the structure of our object in the curly
        braces.

            let articleSchema = mongoose.Schema({
                title: {}
            })
        iii. Notice that the property accepts an object. In this 
        object we define the parameters the information must adhere
        to. In this case it must be a string, and it IS required.

            let articleSchema = mongoose.Schema({
                title: {
                    type: String,
                    required: true
                }
            })
    
    5. When the schema is fully defined we need to export it!
        i.
            let Article = module.exports = mongoose.model('Name of the Model', Schema Variable)
    
    6. Now we must import the model to our main file.
        i. let Article = require('./models/article')

    7. To be able to use the database on our HOME ROUTE we need to
    understand how .find() works within the context of a GET.
        i.
            app.get('/', (req, res) => {
                importedModel.find()
            })

            the find accepts: 1.) A query, but in this case, we want
            all the entries in our database so we include {} as the
            first parameter. 2.) A function with parameters err and 
            the RESPONSE which we can name anything we want. It is 
            important to note that the RESPONSE param is recieving
            everything from the query.

            app.get('/', (req, res) => {
                importedModel.find({}, (err, article) =>{

                })
            })
        ii
            Now that we understand that the second param of the find()
            is the response. We can use it to render our pug view.

            app.get('/', (req, res) => {
                importedModel.find({}, (err, articles) =>{
                    res.render('index', {
                        title: 'Articles',
                        articles: articles
                    })
                })
            })

===================================================================
-
===================================================================
-               Form to Add Article to MONGO DB                   -
===================================================================

    1. First, we will create the form in PUG.
        i. form()

        ii. Add attributes:
            form(method='POST', action='/articles/add')

        iii. Inside the form we create a div group:
            form(method= 'POST', action='/articles/add')
                #form-group
                    label Title:
                    input.form-control(name='title', type='text)
            
            What this does is create a field where we can CREATE or
            POST the information we need.

            Repeat step iii for auther and body.
        
        NOTE: body will need to change to "textarea" as well as getting
        rid of the  type='text'.

        iv. finally, we will need a button so that we can submit the information:

            input.btn.btn-primary(type='submit', value='Submit')

    2. Now that we have the form set up, we need to set it up so that when the client
    submits something the server will get it. This is formally known as a POST
    request.

        i. For this we will use the Express's post method:
            app.post()
        
        ii. it accepts 2 parameters: the route (string), and the (req,res) function:
            app.post('route/route/route', (req, res) => {
                //body
            })

        iii. To test if the post request is working place console.log('message') in 
        the body of the post method. You should see the message in the console of the
        server.
    
    3. The behaviour we want now is that when the user fills out the form and clicks
    submit. We want the information they fill out to be added to our database. This will
    require bodyparser.

        i. To install body parser type: npm install body-parser

        ii. In order for body parser to function we need to install body-parser
        middlewares.
            // parse application/x-www-form-urlencoded
            app.use(bodyParser.urlencoded({ extended: false }))
            // parse application/json
            app.use(bodyParser.json())

        iii. To test the use of body parser include this in the POsT request:
            console.log(req.body.nameoffield)

===================================================================
-
===================================================================
-                        BOWER AND BOOTSTRAP                      -
===================================================================

    1. Setting up
        i. create a public folder in the root directory.
        
        ii. We need to let Express know which folder we want it to
        treate as a static folder.

            app.use(express.static('public'))
        
        iii. Now express understands that it can serve whatever is 
        inside our ./public folder
    
    2. Installing BOOTSTRAP using a front end package manager.
        i. We will install bower.
            - NPM INSTALL -G BOWER or just npm i bower.

        ii. When we install bower packages, it is going to make a folder
        we want that folder in the public folder. In order to do that 
        we must:
            - create a .bowerrc folder in the root directory
            - in .bowerrc put the following code:
                {
                    "directory": "public/bower_components"
                }
        
        iii. at this point we can install bootstrap:
            - bower install bootstrap
        
        iv. Once installed we need to reference it in our template engine.
        For pug it looks like this:

            link(rel='stylesheet' href='/bower_components/bootstrap/dist/css/bootstrap.css')








